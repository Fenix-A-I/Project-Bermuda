Team name : Python Pirates
* SRS: Concept of operations
* SDS: system overview
* Rough architecture diagram
* Technologies
* Timeline / team member roles


Project Plan 
Team information:
* Team will communicate through discord
* Team Meetings will be held between team members weekly to track progress and keep positions clear. This will be done on zoom
* Everything will be submitted on github
* Making decisions will be decided in meetings with communication with the team. 


Technologies used: Python/flask


Work breakdown schedule and project schedule (less than 10 milestones) :
October 9th: Team meeting 1
Oct 11th: Proposal
Oct 15th-17th: Plan presentations
October 22-24th: Progress meeting 1
Nov 5th-7th: Progress meeting 2
Nov 19th-21st: Progress meeting 3
Dec 3rd-5th: project deliveries
Dec 6th: Project Due


Monitor and report progress: kanban/scrum 

Description of requirements (10 measurable requirements, 6 must be non-functional) :
* Users must authenticate via Microsoft O365 before accessing the platform (OAuth).
* the system must store and manage SSH keys for students into a database. 
* Track user progress on challenges and lessons, updating profiles after completion.
Non-Functional Requirements:
* Security: The platform must enforce secure data encryption for SSH keys and user credentials.
* Scalability: The system should support concurrent access.
* Performance: Challenge completion verification must occur within seconds of submission.
* Availability: The system must maintain an uptime of 99.9%.
* Usability: User interface must be intuitive and accessible to students with basic technical skills.


Rationale for steps:
   * The architecture is modular to enhance scalability and security. By isolating authentication, database management, and challenge handling, each component can be independently optimized or updated. This also ensures a clear separation of concerns, minimizing the risk of system failures or security breaches.






________________


Software Requirements Specification (SRS)


Problem Statement:
* The University of Oregon Cybersecurity Club needs an educational platform for students to practice cybersecurity skills, similar to "Hack the Box." This platform will authenticate users via Microsoft Office 365 to ensure that only University of Oregon students have access. The system will track user progress, store SSH keys, passwords, and provide a structured environment for learning. Currently, no system within the university offers this, creating a gap in cybersecurity skill development.


Description of Users
* Primary Users: University of Oregon students enrolled in cybersecurity programs, cybersecurity club, or any student at University of Oregon. They are familiar with basic networking concepts and security practices but may vary in experience with ethical hacking tools.


Scenarios or Use Cases
* Scenario 1: New Student Registration
   * A student logs in using their Microsoft O365 credentials, which authenticates them as a University of Oregon student. Upon successful login, the system creates an account and stores their SSH key for future sessions.
* Scenario 2: Completing a Lesson
   * A student chooses a cybersecurity challenge, completes the task via SSH, and submits the result. The system verifies the solution, records the progress, and updates the user’s profile.


* Detailed Description of Requirements
   * Functional Requirements:
      * Users must authenticate via Microsoft O365 before accessing the platform.
      * The system must store and manage SSH keys for students.
      * Track user progress on challenges and lessons, updating profiles after completion.
   * Non-Functional Requirements:
      * Security: The platform must enforce secure data encryption for SSH keys and user credentials.
      * Scalability: The system should support concurrent access by up to 500 students.
      * Performance: Challenge completion verification must occur within 2 seconds of submission.
      * Availability: The system must maintain an uptime of 99.9%.
      * Usability: User interface must be intuitive and accessible to students with basic technical skills.


Software Design Specification (SDS)


* System Overview: The platform provides a secure environment where University of Oregon students can practice ethical hacking. It includes components for user authentication via Microsoft O365, data storage (user profiles, progress, and SSH keys), and challenge tracking. The design prioritizes security, scalability, and user-friendly interfaces.
* Overall Design Description
   * Architecture: The system follows a modular design consisting of:
      * Authentication Module: Interfaces with Microsoft O365 for secure student login.
      * Database Module: Manages user data, including SSH keys, passwords, and lesson progress.
      * Challenge Management Module: Handles the deployment of challenges and verification of solutions.
      * Data Flow: Upon login, the authentication module verifies the user, and the database retrieves the user’s profile. The student selects a challenge, which is executed via SSH, and the results are stored in the database.


* Database (ER Diagram) 
* Entities
   * User: Stores basic profile data (ID, name, email, SSH key).
   * Progress: Tracks the lessons and challenges completed by each user.
   * Admin: Stores admin data for monitoring.
* Relationships
   * A user can complete many challenges.
   * Each challenge has a unique identifier and is linked to progress data.


* Design Rationale
   * The architecture is modular to enhance scalability and security. By isolating authentication, database management, and challenge handling, each component can be independently optimized or updated. This also ensures a clear separation of concerns, minimizing the risk of system failures or security breaches.